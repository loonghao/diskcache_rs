# CI/CD Pipeline for diskcache_rs
# Includes testing, benchmarking, and PyPI publishing
name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install dependencies
        run: |
          uv add diskcache pytest pytest-benchmark
      - name: Build extension
        run: uvx maturin develop
      - name: Run tests
        run: |
          uv run python -m pytest test_*.py -v
      - name: Run basic functionality tests
        run: |
          uv run python simple_test.py

  # Performance benchmarking against original diskcache
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install dependencies
        run: |
          uv add diskcache pytest pytest-benchmark
      - name: Build extension
        run: uvx maturin develop --release
      - name: Run performance comparison
        run: |
          uv run python benchmarks/performance_comparison.py
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.json
        if: always()

  # Code formatting and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Check Rust formatting
        run: cargo fmt --all -- --check
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Install Python dependencies
        run: uv add ruff mypy
      - name: Run ruff
        run: uvx ruff check .
      - name: Run ruff format check
        run: uvx ruff format --check .

  # Build wheels for distribution
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install diskcache_rs --no-index --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
      - uses: uraimo/run-on-arch-action@v2
        if: matrix.target != 'ppc64le'
        name: Install built wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip3 install diskcache_rs --no-index --find-links dist/ --force-reinstall
            python3 -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-cross-${{ matrix.target }}
          path: dist

  musllinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip
            pip3 install -U pip
            pip3 install diskcache_rs --no-index --find-links /io/dist/ --force-reinstall
            python3 -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}
          path: dist

  musllinux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
      - uses: uraimo/run-on-arch-action@v2
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip
            pip3 install -U pip
          run: |
            pip3 install diskcache_rs --no-index --find-links dist/ --force-reinstall
            python3 -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-cross-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Install built wheel
        run: |
          pip install diskcache_rs --no-index --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Install built wheel - x86_64
        run: |
          pip install diskcache_rs --no-index --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          target: universal2-apple-darwin
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Install built wheel - universal2
        run: |
          pip install diskcache_rs --no-index --find-links dist --force-reinstall
          python -c "import diskcache_rs; print('diskcache_rs imported successfully')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [test, lint, benchmark, linux, linux-cross, musllinux, musllinux-cross, windows, macos]
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    environment:
      name: pypi
      url: https://pypi.org/p/diskcache_rs
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-i686
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-cross-aarch64
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-cross-armv7
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-cross-s390x
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-cross-ppc64le
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-musllinux-x86_64-unknown-linux-musl
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-musllinux-i686-unknown-linux-musl
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-musllinux-cross-aarch64-unknown-linux-musl
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-musllinux-cross-armv7-unknown-linux-musleabihf
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-windows-x64
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-windows-x86
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: wheels-macos
          path: dist
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
